[{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Google Traffic","text":"Google Maps displays information traffic conditions across area. package provides functions produce georeferenced rasters real-time Google Maps traffic information. Google traffic information georeferenced data format facilitates analysis traffic information (e.g., spatially merging traffic information data sources). package inspired existing research used Google traffic information, including New York City Dar es Salaam. image shows example raster produced using package showing traffic within Washington, DC.  Pixel values rasters derived Google traffic colors can one four values: package provides function query Google traffic data around location, within polygon, using grid. main functions following: gt_make_raster(): Create googe traffic raster around point gt_make_raster_from_polygon(): Create googe traffic raster using polygon gt_make_grid(): Create grid (sf polygon) defines locations query traffic data gt_make_raster_from_grid(): Create googe traffic raster using grid","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Google Traffic","text":"package can installed via CRAN.","code":"install.packages(\"googletraffic\")"},{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"google-api-key","dir":"Articles","previous_headings":"","what":"Google API Key","title":"Google Traffic","text":"Querying Google traffic information requires Google API key Maps Javascript API enabled. create Google API key, follow instructions.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Google Traffic","text":"code run running following examples. load packages, set Google API key, define palette used visualizing traffic data leaflet.","code":"## Load Google Traffic package library(googletraffic)  ## Load additional packages for working with and visualizing data library(leaflet) library(leaflet.providers) library(raster) library(dplyr)  ## Set Google API Key google_key <- \"GOOGLE-API-KEY-HERE\"  ## Define Leaflet Palette and Legend traffic_pal <- colorNumeric(c(\"green\", \"orange\", \"red\", \"#660000\"),                              1:4,                             na.color = \"transparent\")"},{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"key-parameters","dir":"Articles","previous_headings":"","what":"Key parameters","title":"Google Traffic","text":"following key parameters relevant across functions querying Google Traffic data. zoom: zoom level defines resolution traffic image. Values can range 0 20. equator, zoom level 10, pixel 150 meters; zoom level 20, pixel 0.15 meters. Consequently, smaller zoom levels can used larger roads interest (e.g., highways), larger zoom levels needed capturing smaller roads. height/width: height width parameters define height width raster terms pixels. kilometer height/width pixels depends primarily zoom level (larger zoom levels correspond pixels smaller kilometer distance). Large height/width delay time: Google traffic data takes time render map, larger height width values require time data render. functions automatically scale delay time depending height width values set, delay time can also manually set using webshot_delay parameter. Note traffic data may fail render large height width values, matter webshot_delay set (find function works well height width 2000 less). Default height/width: gt_make_raster_from_polygon() gt_make_grid() functions, height width need set. function first test height width 2000 API query cover region interest, smaller height width can used number API calls made, smaller height width used. However, height width can still manually set functions.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"raster-around-point","dir":"Articles","previous_headings":"","what":"Raster Around Point","title":"Google Traffic","text":"gt_make_raster() function produces raster, using centroid location height/width around centroid specify location query traffic information. example queries traffic lower Manhattan, NYC. using smaller zoom, can capture larger area; however, pixels coarse.","code":"## Make raster r <- gt_make_raster(location   = c(40.712778, -74.006111),                     height     = 1000,                     width      = 1000,                     zoom       = 16,                     google_key = google_key) ## Map raster leaflet(width = \"100%\") %>%   addProviderTiles(\"Esri.WorldGrayCanvas\") %>%   addRasterImage(r, colors = traffic_pal, opacity = 1, method = \"ngb\") ## Make raster r <- gt_make_raster(location   = c(41.384900, -78.891302),                     height     = 1000,                     width      = 1000,                     zoom       = 7,                     google_key = google_key) ## Map raster leaflet(width = \"100%\") %>%   addProviderTiles(\"Esri.WorldGrayCanvas\") %>%   addRasterImage(r, colors = traffic_pal, opacity = 1, method = \"ngb\") %>%   setView(lat = 41.384900, lng = -78.891302, zoom = 6)"},{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"raster-around-polygon","dir":"Articles","previous_headings":"","what":"Raster Around Polygon","title":"Google Traffic","text":"example shows querying traffic information lower Manhattan. example, show querying traffic information Manhattan still using relatively high zoom level (allows capturing traffic smaller streets). gt_make_raster_from_polygon() accepts polygon input; needed, multiple API queries made query traffic full polygon.","code":"## Grab polygon of Manhattan us_sp <- getData('GADM', country='USA', level=2) ny_sp <- us_sp[us_sp$NAME_2 %in% \"New York\",]  ## Make raster r <- gt_make_raster_from_polygon(polygon    = ny_sp,                                  zoom       = 15,                                  google_key = google_key) ## Map raster leaflet(width = \"100%\") %>%   addProviderTiles(\"Esri.WorldGrayCanvas\") %>%   addRasterImage(r, colors = traffic_pal, opacity = 1, method = \"ngb\")"},{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"raster-using-grid","dir":"Articles","previous_headings":"","what":"Raster Using Grid","title":"Google Traffic","text":"Within gt_make_raster_from_polygon(), function creates grid covers polygon, creates traffic raster grid, merges rasters together. may prefer first create see grid, create traffic raster using grid. example, one (1) create grid covers polygon (2) remove certain grid tiles cover areas may interest. gt_make_grid() gt_make_raster_from_grid() functions facilitate process; gt_make_grid() creates grid, gt_make_raster_from_grid() uses grid input create traffic raster. First, create grid using gt_make_grid(). notice tile bottom left corner just covers water land outside Manhattan. reduce number API queries need make, can remove tile. Second, use grid make traffic raster using gt_make_raster_from_grid().","code":"grid_df <- gt_make_grid(polygon = ny_sp,                         zoom    = 15) leaflet(width = \"100%\") %>%   addTiles() %>%   addPolygons(data = grid_df, popup = ~as.character(id)) grid_clean_df <- grid_df[-5,]  leaflet(width = \"100%\") %>%   addTiles() %>%   addPolygons(data = grid_clean_df) ## Make raster r <- gt_make_raster_from_grid(grid_param_df = grid_clean_df,                               google_key    = google_key) ## Map raster leaflet(width = \"100%\") %>%   addProviderTiles(\"Esri.WorldGrayCanvas\") %>%   addRasterImage(r, colors = traffic_pal, opacity = 1, method = \"ngb\")"},{"path":"https://dime-worldbank.github.io/googletraffic/articles/googletraffic-vignette.html","id":"make-png-then-convert-to-raster","dir":"Articles","previous_headings":"","what":"Make PNG then Convert to Raster","title":"Google Traffic","text":"make Google traffic raster, functions first makes temporary png file converts png file rasterâ€”raster outputted. workflows may want separate processes, PNG file first created, PNG file converted raster. support workflows, package provides : gt_make_png() function creates PNG file traffic data gt_load_png_as_traffic_raster() function converts PNG file spatially-referenced traffic raster example illustrates process. can also use process querying traffic data larger study area requires making multiple API calls. example illustrates creating multiple PNGs grid.","code":"#### Make png # The function does not output anything in R; it saves a png file, specified  # using the \"out_filename\" parameter gt_make_png(location = c(40.712778, -74.006111),             height   = 1000,             width    = 1000,             zoom     = 16,             out_filename = \"google_traffic.png\",             google_key = google_key)  #### Convert png to raster # We now convert the \"google_traffic.png\" created above into a raster. Because  # the png is not spatially referenced, we need to enter the same location, # height, width, and zoom parameters as were specified in gt_make_png() r <- gt_load_png_as_traffic_raster(filename = \"google_traffic.png\",                                    location = c(40.712778, -74.006111),                                    height   = 1000,                                    width    = 1000,                                    zoom     = 16) #### First, make grid grid_df <- gt_make_grid(polygon = ny_sp,                         height  = 2000,                         width   = 2000,                         zoom    = 15) print(grid_df) #> Simple feature collection with 6 features and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -74.10988 ymin: 40.68462 xmax: -73.85324 ymax: 40.87875 #> Geodetic CRS:  WGS 84 #>   longitude latitude id height width zoom                       geometry #> 1 -73.98156 40.84630  1   2000  2000   15 POLYGON ((-74.02448 40.8138... #> 2 -73.89616 40.84630  2   2000  2000   15 POLYGON ((-73.93907 40.8138... #> 3 -73.98156 40.78173  3   2000  2000   15 POLYGON ((-74.02448 40.7492... #> 4 -73.89616 40.78173  4   2000  2000   15 POLYGON ((-73.93907 40.7492... #> 5 -74.06696 40.71715  5   2000  2000   15 POLYGON ((-74.10988 40.6846... #> 6 -73.98156 40.71715  6   2000  2000   15 POLYGON ((-74.02448 40.6846... #### Make PNGs from grid # Exports PNGs for(i in 1:nrow(grid_df)){   grid_i_df <- grid_df[i,]      gt_make_png(location     = c(grid_i_df$latitude, grid_i_df$longitude),               height       = grid_i_df$height,               width        = grid_i_df$width,               zoom         = grid_i_df$zoom,               out_filename = paste0(i, \"_google_traffic.png\"),               google_key   = google_key) }  #### Convert PNGs to rasters # Here we make a list of rasters r_list <- lapply(1 in 1:nrow(grid_df)){      grid_i_df <- grid_df[i,]      gt_load_png_as_traffic_raster(filename = paste0(i, \"_google_traffic.png\"),                                 location = c(grid_i_df$latitude,                                               grid_i_df$longitude),                                 height   = grid_i_df$height,                                 width    = grid_i_df$width,                                 zoom     = grid_i_df$zoom) }  #### Mosaic rasters together # To mosaic the rasters together, the mosaic() function from the raster package  # requires that rasters have the same origin and resolution. The above rasters  # will not have the same orgin, and the resolutions will be slightly different.  # The gt_mosaic() function allows mosaicing rasters with different origins and  # resolutions. r <- gt_mosaic(r_list)"},{"path":"https://dime-worldbank.github.io/googletraffic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Marty. Author, maintainer.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marty R (2022). googletraffic: Google Traffic. R package version 0.1.1, https://dime-worldbank.github.io/googletraffic/.","code":"@Manual{,   title = {googletraffic: Google Traffic},   author = {Robert Marty},   year = {2022},   note = {R package version 0.1.1},   url = {https://dime-worldbank.github.io/googletraffic/}, }"},{"path":"https://dime-worldbank.github.io/googletraffic/index.html","id":"googletraffic-","dir":"","previous_headings":"","what":"Google Traffic","title":"Google Traffic","text":"Create Georeferenced Traffic Data Google Maps Javascript API Overview Installation API Key Quick Start Usage","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/index.html","id":"overview-","dir":"","previous_headings":"","what":"Overview","title":"Google Traffic","text":"Google Maps displays information traffic conditions across area. package provides functions produce georeferenced rasters real-time Google Maps traffic information. Google traffic information georeferenced data format facilitates analysis traffic information (e.g., spatially merging traffic information data sources). package inspired existing research used Google traffic information, including New York City Dar es Salaam. Pixel values rasters derived Google traffic colors can one four values:","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/index.html","id":"installation-","dir":"","previous_headings":"","what":"Installation","title":"Google Traffic","text":"package can installed via CRAN.","code":"install.packages(\"googletraffic\")"},{"path":"https://dime-worldbank.github.io/googletraffic/index.html","id":"api-key-","dir":"","previous_headings":"","what":"API Key","title":"Google Traffic","text":"Querying Google traffic information requires Google API key Maps Javascript API enabled. create Google API key, follow instructions.","code":""},{"path":[]},{"path":"https://dime-worldbank.github.io/googletraffic/index.html","id":"setup-","dir":"","previous_headings":"Quickstart","what":"Setup","title":"Google Traffic","text":"","code":"## Load package library(googletraffic)  ## Load additional packages to run below examples library(ggplot2) library(dplyr) library(raster)  ## Set API key google_key <- \"GOOGLE-KEY-HERE\""},{"path":"https://dime-worldbank.github.io/googletraffic/index.html","id":"raster-around-point-","dir":"","previous_headings":"Quickstart","what":"Raster around point","title":"Google Traffic","text":"create raster around point, set centroid coordinate, zoom level, height/width around centroid coordinate (height/width terms pixels, kilometer distance pixel determined primarily zoom level).","code":"## Make raster r <- gt_make_raster(location   = c(40.712778, -74.006111),                     height     = 2000,                     width      = 2000,                     zoom       = 16,                     google_key = google_key)  ## Plot r_df <- rasterToPoints(r, spatial = TRUE) %>% as.data.frame() names(r_df) <- c(\"value\", \"x\", \"y\")  ggplot() +   geom_raster(data = r_df,    aes(x = x, y = y,    fill = as.factor(value))) +   labs(fill = \"Traffic\\nLevel\") +   scale_fill_manual(values = c(\"green2\", \"orange\", \"red\", \"#660000\")) +   coord_quickmap() +    theme_void() +   theme(plot.background = element_rect(fill = \"white\", color=\"white\"))"},{"path":"https://dime-worldbank.github.io/googletraffic/index.html","id":"raster-around-polygon-","dir":"","previous_headings":"Quickstart","what":"Raster around polygon","title":"Google Traffic","text":"can also create raster using polygon define location. needed, function make multiple API calls cover area within polygon (larger zoom value result needing make API calls).","code":"## Grab shapefile of Manhattan us_sp <- getData('GADM', country='USA', level=2) ny_sp <- us_sp[us_sp$NAME_2 %in% \"New York\",]  ## Make raster r <- gt_make_raster_from_polygon(polygon    = ny_sp,                                  zoom       = 16,                                  google_key = google_key)  ## Plot r_df <- rasterToPoints(r, spatial = TRUE) %>% as.data.frame() names(r_df) <- c(\"value\", \"x\", \"y\")  ggplot() +   geom_raster(data = r_df,    aes(x = x, y = y,    fill = as.factor(value))) +   labs(fill = \"Traffic\\nLevel\") +   scale_fill_manual(values = c(\"green2\", \"orange\", \"red\", \"#660000\")) +   coord_quickmap() +    theme_void() +   theme(plot.background = element_rect(fill = \"white\", color=\"white\"))"},{"path":"https://dime-worldbank.github.io/googletraffic/index.html","id":"usage-","dir":"","previous_headings":"","what":"Usage","title":"Google Traffic","text":"See vignette additional information examples illustrating use package.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_load_png_as_traffic_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts PNG to raster â€” gt_load_png_as_traffic_raster","title":"Converts PNG to raster â€” gt_load_png_as_traffic_raster","text":"Converts PNG Google traffic data raster translates color values traffic values","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_load_png_as_traffic_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts PNG to raster â€” gt_load_png_as_traffic_raster","text":"","code":"gt_load_png_as_traffic_raster(   filename,   location,   height,   width,   zoom,   traffic_color_dist_thresh = 4.6,   traffic_color_dist_metric = \"CIEDE2000\" )"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_load_png_as_traffic_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts PNG to raster â€” gt_load_png_as_traffic_raster","text":"filename Filename PNG file location Vector latitude longitude used create PNG file using gt_make_png() height Height (pixels; pixel length depends zoom) used create PNG file using gt_make_png() width Width (pixels; pixel length depends zoom) used create PNG file using gt_make_png() zoom Zoom level used create PNG file using gt_make_png() traffic_color_dist_thresh Google traffic relies four main base colors: #63D668 traffic, #FF974D medium traffic, #F23C32 high traffic, #811F1F heavy traffic. Slight variations colors can also represent traffic. default, base colors colors within 4.6 color distance base color used define traffic; default, CIEDE2000 metric used determine color distance. value 2.3 one threshold used define \"just noticeable distance\" (JND) colors (default, 2 X JND used). parameter changes color distance base colors used define colors traffic. information, see . traffic_color_dist_metric See ; parameter changes metric used calculate distances colors. default, CIEDE2000 used; CIE76 CIE94 can also used. information, see .","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_load_png_as_traffic_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts PNG to raster â€” gt_load_png_as_traffic_raster","text":"Returns raster pixel represents traffic level (1 = traffic, 2 = medium traffic, 3 = traffic delays, 4 = heavy traffic)","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_load_png_as_traffic_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts PNG to raster â€” gt_load_png_as_traffic_raster","text":"","code":"if (FALSE) { ## Make png gt_make_png(location     = c(40.712778, -74.006111),             height       = 1000,             width        = 1000,             zoom         = 16,             out_filename = \"google_traffic.png\",             google_key   = \"GOOGLE-KEY-HERE\")  ## Load png as traffic raster r <- gt_load_png_as_traffic_raster(filename = \"google_traffic.png\",                                    location = c(40.712778, -74.006111),                                    height   = 1000,                                    width    = 1000,                                    zoom     = 16) }"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates Grid to Query Google Traffic â€” gt_make_grid","title":"Creates Grid to Query Google Traffic â€” gt_make_grid","text":"Creates grid sf polygons, traffic data polygon can queried using gt_make_raster_from_grid().","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates Grid to Query Google Traffic â€” gt_make_grid","text":"","code":"gt_make_grid(   polygon,   zoom,   height_width_max = 2000,   height = NULL,   width = NULL,   reduce_hw = 10 )"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates Grid to Query Google Traffic â€” gt_make_grid","text":"polygon Polygon (sf object SpatialPolygonsDataframe) WGS84 CRS defines region queried. zoom Zoom level; integer 5 20. information zoom levels correspond pixel size, see . height_width_max Maximum pixel height width check using grid (pixel length depends zoom). number grids can made smaller height/width, function use smaller height/width. height width specified, height width used height_width_max ignored. (Default: 2000) height Height, pixels, grid (pixel length depends zoom). Enter height manually specify height; otherwise, height height_width_max smaller used. width Pixel, pixels, grid (pixel length depends zoom). Enter width manually specify width; otherwise, width height_width_max smaller used. reduce_hw Number pixels reduce height/width . creates overlap grids ensure blank space grids. (Default: 10).","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates Grid to Query Google Traffic â€” gt_make_grid","text":"Returns sf dataframe locations query, including parameters needed gt_make_raster_from_grid()","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates Grid to Query Google Traffic â€” gt_make_grid","text":"","code":"## Make polygon poly_sf <- c(xmin = -74.02426,              xmax = -73.91048,              ymin = 40.70042,              ymax = 40.87858) |>   sf::st_bbox() |>   sf::st_as_sfc() |>   sf::st_as_sf()  sf::st_crs(poly_sf) <- 4326  ## Make grid using polygon grid_sf <- gt_make_grid(polygon = poly_sf,                         height  = 2000,                         width   = 2000,                         zoom    = 16) #> Warning: \"height_width_max\" ignored; if \"height\", \"width\", and \"height_width_max\" are all specified, \"height_width_max\" will be ignored. #> Warning: st_centroid assumes attributes are constant over geometries of x"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Google Traffic PNG â€” gt_make_png","title":"Make Google Traffic PNG â€” gt_make_png","text":"Make png file Google traffic data. gt_load_png_as_traffic_raster() function can used convert png traffic raster","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Google Traffic PNG â€” gt_make_png","text":"","code":"gt_make_png(   location,   height,   width,   zoom,   out_filename,   google_key,   webshot_zoom = 1,   webshot_delay = NULL,   print_progress = TRUE )"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_png.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Google Traffic PNG â€” gt_make_png","text":"location Vector latitude longitude height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom level; integer 5 20. information zoom levels correspond pixel size, see . out_filename Filename PNG file make google_key Google API key, Maps JavaScript API enabled. create Google API key, follow instructions. webshot_zoom many pixels created relative height width values. height width set 100 webshot_zoom set 2, resulting raster dimensions 200x200 (default: 1). webshot_delay long wait Google traffic layer render. Larger height/widths require longer delay times. NULL, following delay time (seconds) used: delay = max(height,width)/200. print_progress Whether print function progress (default: TRUE)","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_png.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Google Traffic PNG â€” gt_make_png","text":"Returns georeferenced raster file. file can contain following values: 1 = traffic; 2 = light traffic; 3 = moderate traffic; 4 = heavy traffic.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Google Traffic PNG â€” gt_make_png","text":"","code":"if (FALSE) { gt_make_png(location     = c(40.712778, -74.006111),             height       = 1000,             width        = 1000,             zoom         = 16,             out_filename = \"google_traffic.png\",             google_key   = \"GOOGLE-KEY-HERE\") }"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Google Traffic Raster â€” gt_make_raster","title":"Make Google Traffic Raster â€” gt_make_raster","text":"Make raster Google traffic data, pixel one four values indicating traffic volume (traffic, light, moderate, heavy).","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Google Traffic Raster â€” gt_make_raster","text":"","code":"gt_make_raster(   location,   height,   width,   zoom,   google_key,   traffic_color_dist_thresh = 4.6,   traffic_color_dist_metric = \"CIEDE2000\",   webshot_zoom = 1,   webshot_delay = NULL,   print_progress = TRUE )"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Google Traffic Raster â€” gt_make_raster","text":"location Vector latitude longitude height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom level; integer 5 20. information zoom levels correspond pixel size, see . google_key Google API key, Maps JavaScript API enabled. create Google API key, follow instructions. traffic_color_dist_thresh Google traffic relies four main base colors: #63D668 traffic, #FF974D medium traffic, #F23C32 high traffic, #811F1F heavy traffic. Slight variations colors can also represent traffic. default, base colors colors within 4.6 color distance base color used define traffic; default, CIEDE2000 metric used determine color distance. value 2.3 one threshold used define \"just noticeable distance\" (JND) colors (default, 2 X JND used). parameter changes color distance base colors used define colors traffic. information, see . traffic_color_dist_metric See ; parameter changes metric used calculate distances colors. default, CIEDE2000 used; CIE76 CIE94 can also used. information, see . webshot_zoom many pixels created relative height width values. height width set 100 webshot_zoom set 2, resulting raster dimensions 200x200 (default: 1). webshot_delay long wait Google traffic layer render. Larger height/widths require longer delay times. NULL, following delay time (seconds) used: delay = max(height,width)/200. print_progress Whether print function progress (default: TRUE)","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Google Traffic Raster â€” gt_make_raster","text":"Returns georeferenced raster. Raster pixels can contain following values: 1 = traffic; 2 = medium traffic; 3 = high traffic; 4 = heavy traffic.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Google Traffic Raster â€” gt_make_raster","text":"","code":"if (FALSE) { r <- gt_make_raster(location   = c(40.712778, -74.006111),                     height     = 1000,                     width      = 1000,                     zoom       = 16,                     google_key = \"GOOGLE-KEY-HERE\") }"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"Make raster Google traffic data, pixel one four values indicating traffic volume (traffic, light, moderate, heavy).","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"","code":"gt_make_raster_from_grid(   grid_param_df,   google_key,   traffic_color_dist_thresh = 4.6,   traffic_color_dist_metric = \"CIEDE2000\",   webshot_zoom = 1,   webshot_delay = NULL,   return_list_of_rasters = FALSE,   print_progress = TRUE )"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"grid_param_df Grid parameter dataframe produced gt_make_grid() google_key Google API key, Maps JavaScript API enabled. create Google API key, follow instructions. traffic_color_dist_thresh Google traffic relies four main base colors: #63D668 traffic, #FF974D medium traffic, #F23C32 high traffic, #811F1F heavy traffic. Slight variations colors can also represent traffic. default, base colors colors within 4.6 color distance base color used define traffic; default, CIEDE2000 metric used determine color distance. value 2.3 one threshold used define \"just noticeable distance\" (JND) colors (default, 2 X JND used). parameter changes color distance base colors used define colors traffic. information, see . traffic_color_dist_metric See ; parameter changes metric used calculate distances colors. default, CIEDE2000 used; CIE76 CIE94 can also used. information, see . webshot_zoom many pixels created relative height width values. height width set 100 webshot_zoom set 2, resulting raster dimensions 200x200 (default: 1). webshot_delay long wait Google traffic layer render. Larger height/widths require longer delay times. NULL, following delay time (seconds) used: delay = max(height,width)/200. return_list_of_rasters Instead merging traffic rasters produced grid together one large raster, return list rasters (default: FALSE) print_progress Whether print function progress (default: TRUE)","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"Returns georeferenced raster. Raster pixels can contain following values: 1 = traffic; 2 = medium traffic; 3 = high traffic; 4 = heavy traffic.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"","code":"if (FALSE) { ## Grab polygon of Manhattan us_sp <- raster::getData('GADM', country='USA', level=2) ny_sp <- us_sp[us_sp$NAME_2 %in% \"New York\",]  ## Make Grid grid_df <- gt_make_grid(polygon = ny_sp,                        height   = 2000,                        width    = 2000,                        zoom     = 16)  ## Make raster from grid                         r <- gt_make_raster_from_grid(grid_param_df = grid_clean_df,                               google_key    = \"GOOGLE-KEY-HERE\") }"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"Make raster Google traffic data, pixel one four values indicating traffic volume (traffic, light, moderate, heavy).","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"","code":"gt_make_raster_from_polygon(   polygon,   zoom,   google_key,   height_width_max = 2000,   height = NULL,   width = NULL,   traffic_color_dist_thresh = 4.6,   traffic_color_dist_metric = \"CIEDE2000\",   webshot_zoom = 1,   webshot_delay = NULL,   reduce_hw = 10,   return_list_of_rasters = FALSE,   mask_to_polygon = TRUE,   print_progress = TRUE )"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"polygon Polygon (sf object SpatialPolygonsDataframe) WGS84 CRS zoom Zoom level; integer 5 20. information zoom levels correspond pixel size, see . google_key Google API key, Maps JavaScript API enabled. create Google API key, follow instructions. height_width_max Maximum pixel height width check using API query (pixel length depends zoom). number API queries can made smaller height/width, function use smaller height/width. height width specified, height width used height_width_max ignored. (Default: 2000) height Height, pixels, API query (pixel length depends zoom). Enter height manually specify height; otherwise, height height_width_max smaller used. width Pixel, pixels, API query (pixel length depends zoom). Enter width manually specify width; otherwise, width height_width_max smaller used. traffic_color_dist_thresh Google traffic relies four main base colors: #63D668 traffic, #FF974D medium traffic, #F23C32 high traffic, #811F1F heavy traffic. Slight variations colors can also represent traffic. default, base colors colors within 4.6 color distance base color used define traffic; default, CIEDE2000 metric used determine color distance. value 2.3 one threshold used define \"just noticeable distance\" (JND) colors (default, 2 X JND used). parameter changes color distance base colors used define colors traffic. information, see . traffic_color_dist_metric See ; parameter changes metric used calculate distances colors. default, CIEDE2000 used; CIE76 CIE94 can also used. information, see . webshot_zoom many pixels created relative height width values. height width set 100 webshot_zoom set 2, resulting raster dimensions 200x200 (default: 1). webshot_delay long wait Google traffic layer render (seconds). Larger height/widths require longer delay times. NULL, following delay time (seconds) used: delay = max(height,width)/200. reduce_hw Number pixels reduce height/width . creates overlap grids ensure blank space tiles. (Default: 10). return_list_of_rasters Whether return list raster tiles instead mosaicing together. (Default: FALSE). mask_to_polygon Whether mask raster polygon. (Default: TRUE). print_progress Show progress grid / API query processed. (Default: TRUE).","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"Returns georeferenced raster. Raster pixels can contain following values: 1 = traffic; 2 = medium traffic; 3 = high traffic; 4 = heavy traffic.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_make_raster_from_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"","code":"if (FALSE) { ## Grab polygon of Manhattan us_sp <- raster::getData('GADM', country='USA', level=2) ny_sp <- us_sp[us_sp$NAME_2 %in% \"New York\",]  ## Make raster r <- gt_make_raster_from_polygon(polygon    = ny_sp,                                  height     = 2000,                                  width      = 2000,                                  zoom       = 16,                                  google_key = \"GOOGLE-KEY-HERE\") }"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_mosaic.html","id":null,"dir":"Reference","previous_headings":"","what":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"raster::mosaic() function requires rasters origin resolution. However, producing multiple rasters query traffic data across large study area, rasters origins may resolutions (cases rasters different latitudes queried). gt_mosaic() allows mosaicing rasters different origins resolutions.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_mosaic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"","code":"gt_mosaic(r_list)"},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_mosaic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"r_list List rasters","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_mosaic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"Returns raster.","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/reference/gt_mosaic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"","code":"r1 <- raster::raster(ncol=10, nrow=10, xmn = -10, xmx = 1,  ymn = -10, ymx = 1) r2 <- raster::raster(ncol=10, nrow=10, xmn = 0,   xmx = 10, ymn = 0,   ymx = 10) r3 <- raster::raster(ncol=10, nrow=10, xmn = 9,   xmx = 20, ymn = 9,   ymx = 20)  r123 <- list(r1, r2, r3)  r <- gt_mosaic(r123)"},{"path":"https://dime-worldbank.github.io/googletraffic/news/index.html","id":"googletraffic-010","dir":"Changelog","previous_headings":"","what":"googletraffic 0.1.0","title":"googletraffic 0.1.0","text":"CRAN release: 2022-11-09 Add webshot_zoom parameter Add traffic_color_dist_thresh parameter Add traffic_color_dist_metric parameter","code":""},{"path":"https://dime-worldbank.github.io/googletraffic/news/index.html","id":"googletraffic-010-1","dir":"Changelog","previous_headings":"","what":"googletraffic 0.1.0","title":"googletraffic 0.1.0","text":"CRAN release: 2022-11-09 Make package Added NEWS.md file track changes package.","code":""}]
