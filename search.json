[{"path":"/articles/googletraffic-vignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Google Traffic","text":"Google Maps provides information traffic conditions across area. package provides functions produce georeferenced rasters live Google Maps traffic information. Providing Google traffic information georeferenced data format facilitates analysis traffic information (e.g., spatially merging traffic information data sources). image shows example raster produced using package showing traffic within Washington, DC.  Pixel values rasters derived Google traffic colors can one four values: package provides function query Google traffic data around location, within polygon, using grid. main functions following: gt_make_raster(): Create googe traffic raster around point gt_make_raster_from_polygon(): Create googe traffic raster using polygon gt_make_grid(): Create grid (sf polygon) defines locations query traffic data gt_make_raster_from_grid(): Create googe traffic raster using grid","code":""},{"path":"/articles/googletraffic-vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Google Traffic","text":"package available via github can installed using devtools.","code":"# install.packages(\"devtools\") devtools::install_github(\"dime-worldbank/googletraffic\")"},{"path":"/articles/googletraffic-vignette.html","id":"google-api-key","dir":"Articles","previous_headings":"","what":"Google API Key","title":"Google Traffic","text":"Querying Google traffic information requires Google API key Maps Javascript API enabled. create Google API key, follow instructions.","code":""},{"path":"/articles/googletraffic-vignette.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Google Traffic","text":"code run running following examples. load packages, set Google API key, define palette used visualizing traffic data leaflet.","code":"## Load Google Traffic package library(googletraffic)  ## Load additional packages for working with and visualizing data library(leaflet) library(leaflet.extras) library(leaflet.providers) library(scales) library(mapview) library(raster) library(tidyverse)  ## Set Google API Key google_key <- \"GOOGLE-API-KEY-HERE\"  ## Define Leaflet Palette and Legend traffic_pal <- colorNumeric(c(\"green\", \"orange\", \"red\", \"#660000\"),                              1:4,                             na.color = \"transparent\")"},{"path":"/articles/googletraffic-vignette.html","id":"key-parameters","dir":"Articles","previous_headings":"","what":"Key parameters","title":"Google Traffic","text":"following key parameters relevant across functions querying Google Traffic data. zoom: zoom level defines resolution traffic image. Values can range 0 20. equator, zoom level 10, pixel 150 meters; zoom level 20, pixel 0.15 meters. Consequently, smaller zoom levels can used larger roads interest (e.g., highways), larger zoom levels needed capturing smaller roads. height/width: height width parameters define height width raster terms pixels. kilometer height/width pixels depends primarily zoom level (larger zoom levels correspond height width smaller kilometer distance). Large height/width delay time: Google traffic data takes time render map, larger height width values require time needed data render. functions automatically scale delay time depending height width values set, delay time can also manually set using webshot_delay parameter. Note traffic data may fail render large height width values, matter webshot_delay set (find function works well height/width 2000 less).","code":""},{"path":"/articles/googletraffic-vignette.html","id":"raster-around-point","dir":"Articles","previous_headings":"","what":"Raster Around Point","title":"Google Traffic","text":"gt_make_raster() function produces raster, using centroid location height/width around centroid specify location query traffic information. example queries traffic lower Manhattan, NYC. using smaller zoom, can capture larger area; however, pixels coarse.","code":"## Make raster r <- gt_make_raster(location   = c(40.712778, -74.006111),                     height     = 1000,                     width      = 1000,                     zoom       = 16,                     google_key = google_key) #> Pausing for 5 seconds to allow traffic data to render ## Map raster leaflet(width = \"100%\") %>%   addProviderTiles(\"Esri.WorldGrayCanvas\") %>%   addRasterImage(r, colors = traffic_pal, opacity = 1) %>%   setView(lat = 40.712778, lng = -74.006111, zoom = 13) ## Make raster r <- gt_make_raster(location   = c(41.384900, -78.891302),                     height     = 1000,                     width      = 1000,                     zoom       = 7,                     google_key = google_key) #> Pausing for 5 seconds to allow traffic data to render ## Map raster leaflet(width = \"100%\") %>%   addProviderTiles(\"Esri.WorldGrayCanvas\") %>%   addRasterImage(r, colors = traffic_pal, opacity = 1) %>%   setView(lat = 41.384900, lng = -78.891302, zoom = 6)"},{"path":"/articles/googletraffic-vignette.html","id":"raster-around-polygon","dir":"Articles","previous_headings":"","what":"Raster Around Polygon","title":"Google Traffic","text":"example showed querying traffic information lower Manhattan. , show querying traffic information Manhattan still using relatively high zoom level (allows capturing traffic smaller streets). gt_make_raster_from_polygon() accepts polygon input; needed, multiple API queries made query traffic full polygon. still specify height width, determines height width used single API query. Large height width values result fewer Google queries, smaller height width values require queries cover spatial area; traffic data fail render large height width values set.","code":"## Grab polygon of Manhattan us_sp <- getData('GADM', country='USA', level=2) ny_sp <- us_sp[us_sp$NAME_2 %in% \"New York\",]  ## Make raster r <- gt_make_raster_from_polygon(polygon    = ny_sp,                                  height     = 2000,                                  width      = 2000,                                  zoom       = 15,                                  google_key = google_key) ## Map raster leaflet(width = \"100%\") %>%   addProviderTiles(\"Esri.WorldGrayCanvas\") %>%   addRasterImage(r, colors = traffic_pal, opacity = 1) %>%   setView(lat = 40.78264, lng = -73.96903, zoom=12)"},{"path":"/articles/googletraffic-vignette.html","id":"raster-using-grid","dir":"Articles","previous_headings":"","what":"Raster Using Grid","title":"Google Traffic","text":"gt_make_raster_from_polygon() creates grid covers polygon, creates traffic raster grid, merges rasters together. may prefer first create see grid, create traffic raster using grid. example, one (1) create grid covers polygon (2) remove certain grid tiles cover areas may interest. gt_make_grid() gt_make_raster_from_grid() functions facilitate process; gt_make_grid() creates grid, gt_make_raster_from_grid() uses grid input create traffic raster. First, create grid using gt_make_grid(). notice tile bottom left corner just covers water land outside Manhattan. reduce number API queries need make, can remove tile. Second, use grid make traffic raster using gt_make_raster_from_grid().","code":"grid_df <- gt_make_grid(polygon = ny_sp,                         height  = 2000,                         width   = 2000,                         zoom    = 15) leaflet(width = \"100%\") %>%   addTiles() %>%   addPolygons(data = grid_df, popup = ~as.character(id)) grid_clean_df <- grid_df[-5,]  leaflet(width = \"100%\") %>%   addTiles() %>%   addPolygons(data = grid_clean_df) ## Make raster r <- gt_make_raster_from_grid(grid_param_df = grid_clean_df,                               google_key    = google_key) ## Map raster leaflet(width = \"100%\") %>%   addProviderTiles(\"Esri.WorldGrayCanvas\") %>%   addRasterImage(r, colors = traffic_pal, opacity = 1) %>%   setView(lat = 40.78264, lng = -73.96903, zoom=12)"},{"path":"/articles/googletraffic-vignette.html","id":"make-png-then-convert-to-raster","dir":"Articles","previous_headings":"","what":"Make PNG then Convert to Raster","title":"Google Traffic","text":"make google traffic raster, functions first makes temporary png file converts png file rasterâ€”raster outputted. workflows may require separating processes, PNG file first created, PNG file converted raster. support workflows, package provides : gt_make_png() function creates PNG file traffic data gt_load_png_as_traffic_raster() function converts PNG file spatially-referenced traffic raster example illutrates process. can also use process querying traffic data larger study area requires making multiple API calls. example illustrates creating multiple pngs grid.","code":"#### Make png # The function does not output anything in R; it saves a png file, specified  # using the \"out_filename\" parameter gt_make_png(location = c(40.712778, -74.006111),             height   = 1000,             width    = 1000,             zoom     = 16,             out_filename = \"google_traffic.png\",             google_key = google_key)  #### Convert png to raster # We now convert the \"google_traffic.png\" created above into a raster. Because  # the png is not spatially referenced, we need to enter the same r <- gt_load_png_as_traffic_raster(filename = \"google_traffic.png\",                                    location = c(40.712778, -74.006111),                                    height   = 1000,                                    width    = 1000,                                    zoom     = 16) #### Make grid # We first make a grid, which contains all the parameters needed to make a png then # the raster grid_df <- gt_make_grid(polygon = ny_sp,                         height  = 2000,                         width   = 2000,                         zoom    = 15) print(grid_df) #### Make PNGs from grid # Exports PNGs for(i in 1:nrow(grid_df)){   grid_i_df <- grid_df[i,]      gt_make_png(location     = c(grid_i_df$latitude, grid_i_df$longitude),               height       = grid_i_df$height,               width        = grid_i_df$width,               zoom         = grid_i_df$zoom,               out_filename = paste0(i, \"_google_traffic.png\"),               google_key   = google_key) } #### Convert PNGs to rasters # Here we make a list of rasters r_list <- lapply(1 in 1:nrow(grid_df)){      grid_i_df <- grid_df[i,]      gt_load_png_as_traffic_raster(filename = paste0(i, \"_google_traffic.png\"),                                 location = c(grid_i_df$latitude, grid_i_df$longitude),                                 height   = grid_i_df$height,                                 width    = grid_i_df$width,                                 zoom     = grid_i_df$zoom) } #### Mosaic rasters together # To mosaic the rasters together, the mosaic() function from the raster package  # requires that rasters have the same origin and resolution. The above rasters will # not have the same orgin, and the resolutions will be slightly different. The  # gt_mosaic() function allows mosaicing rasters with different origins and resolutions. r <- gt_mosaic(r_list)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Marty. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marty R (2022). googletraffic: Google Traffic. R package version 0.0.0.9000, https://dime-worldbank.github.io/googletraffic/.","code":"@Manual{,   title = {googletraffic: Google Traffic},   author = {Robert Marty},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://dime-worldbank.github.io/googletraffic/}, }"},{"path":"/index.html","id":"googletraffic-","dir":"","previous_headings":"","what":"Google Traffic","title":"Google Traffic","text":"Create Georeferenced Traffic Data Google Maps Javascript API","code":""},{"path":"/index.html","id":"overview-","dir":"","previous_headings":"","what":"Overview","title":"Google Traffic","text":"Google Maps provides information traffic conditions across area. package provides functions produce georeferenced rasters live Google Maps traffic information. Providing Google traffic information georeferenced data format facilitates analysis traffic information (e.g., spatially merging traffic information data sources). image shows example raster produced using package showing traffic within Washington, DC.  Pixel values rasters derived Google traffic colors can one four values:","code":""},{"path":"/index.html","id":"installation-","dir":"","previous_headings":"","what":"Installation","title":"Google Traffic","text":"package available via github can installed using devtools.","code":"# install.packages(\"devtools\") devtools::install_github(\"dime-worldbank/googletraffic\")"},{"path":"/index.html","id":"usage-","dir":"","previous_headings":"","what":"Usage","title":"Google Traffic","text":"See vignette additional information examples illustrating use package.","code":""},{"path":"/reference/gt_estimate_webshot_delay.html","id":null,"dir":"Reference","previous_headings":"","what":"If not specified, estimate webshot_delay using height and width â€” gt_estimate_webshot_delay","title":"If not specified, estimate webshot_delay using height and width â€” gt_estimate_webshot_delay","text":"specified, estimate webshot_delay using height width","code":""},{"path":"/reference/gt_estimate_webshot_delay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If not specified, estimate webshot_delay using height and width â€” gt_estimate_webshot_delay","text":"","code":"gt_estimate_webshot_delay(height, width, webshot_delay)"},{"path":"/reference/gt_estimate_webshot_delay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"If not specified, estimate webshot_delay using height and width â€” gt_estimate_webshot_delay","text":"height Height width Width webshot_delay Webshot Delay","code":""},{"path":"/reference/gt_estimate_webshot_delay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"If not specified, estimate webshot_delay using height and width â€” gt_estimate_webshot_delay","text":"webshot_delay (seconds).","code":""},{"path":"/reference/gt_html_to_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts Google HTML file to Raster â€” gt_html_to_raster","title":"Converts Google HTML file to Raster â€” gt_html_to_raster","text":"Converts Google HTML file spatially referenced raster file.","code":""},{"path":"/reference/gt_html_to_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts Google HTML file to Raster â€” gt_html_to_raster","text":"","code":"gt_html_to_raster(   filename,   location,   height,   width,   zoom,   webshot_delay = NULL,   print_progress = T )"},{"path":"/reference/gt_html_to_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts Google HTML file to Raster â€” gt_html_to_raster","text":"filename HTML filename convert raster location Vector latitude longitude height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom level webshot_delay long wait .html file load. Larger .html files (large height/widths) require time fully load. NULL, following delay time (seconds) used: delay = max(height,width)/200. print_progress Whether print function progress","code":""},{"path":"/reference/gt_html_to_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts Google HTML file to Raster â€” gt_html_to_raster","text":"Returns georeferenced raster file. file can contain following values: 1 = traffic; 2 = light traffic; 3 = moderate traffic; 4 = heavy traffic.","code":""},{"path":"/reference/gt_load_png_as_traffic_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts png to raster â€” gt_load_png_as_traffic_raster","title":"Converts png to raster â€” gt_load_png_as_traffic_raster","text":"Converts PNG raster translates color values traffic values","code":""},{"path":"/reference/gt_load_png_as_traffic_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts png to raster â€” gt_load_png_as_traffic_raster","text":"","code":"gt_load_png_as_traffic_raster(filename, location, height, width, zoom)"},{"path":"/reference/gt_load_png_as_traffic_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts png to raster â€” gt_load_png_as_traffic_raster","text":"filename Filename/path png file location Vector latitude longitude used create png file using gt_make_png() height Height (pixels; pixel length depends zoom) used create png file using gt_make_png() width Width (pixels; pixel length depends zoom) used create png file using gt_make_png() zoom Zoom used create png file using gt_make_png()","code":""},{"path":"/reference/gt_load_png_as_traffic_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts png to raster â€” gt_load_png_as_traffic_raster","text":"Returns raster pixel represents traffic level (1 = traffic, 2 = medium traffic, 3 = traffic delays, 4 = heavy traffic)","code":""},{"path":"/reference/gt_load_png_as_traffic_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts png to raster â€” gt_load_png_as_traffic_raster","text":"","code":"if (FALSE) { ## Make png gt_make_png(location     = c(40.712778, -74.006111),             height       = 1000,             width        = 1000,             zoom         = 16,             out_filename = \"google_traffic.png\",             google_key   = \"GOOGLE-KEY-HERE\")  ## Load png as traffic raster r <- gt_load_png_as_traffic_raster(filename = \"google_traffic.png\",                                    location = c(40.712778, -74.006111),                                    height   = 1000,                                    width    = 1000,                                    zoom     = 16) }"},{"path":"/reference/gt_make_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the spatial extent of a Google traffic tile â€” gt_make_extent","title":"Determine the spatial extent of a Google traffic tile â€” gt_make_extent","text":"Based location, height, width, zoom, determines spatial extent Google traffic tile","code":""},{"path":"/reference/gt_make_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the spatial extent of a Google traffic tile â€” gt_make_extent","text":"","code":"gt_make_extent(latitude, longitude, height, width, zoom)"},{"path":"/reference/gt_make_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the spatial extent of a Google traffic tile â€” gt_make_extent","text":"latitude Latitude longitude Longitude height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom level","code":""},{"path":"/reference/gt_make_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the spatial extent of a Google traffic tile â€” gt_make_extent","text":"Returns extent object WGS84 (EPSG:4326)","code":""},{"path":"/reference/gt_make_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates grid to query Google Traffic â€” gt_make_grid","title":"Creates grid to query Google Traffic â€” gt_make_grid","text":"Querying large location may unfeasible; consequently, may necessary query multiple smaller locations cover large location. Based location queried height, width zoom parameters, determines points queried.","code":""},{"path":"/reference/gt_make_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates grid to query Google Traffic â€” gt_make_grid","text":"","code":"gt_make_grid(polygon, height, width, zoom, reduce_hw = 10)"},{"path":"/reference/gt_make_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates grid to query Google Traffic â€” gt_make_grid","text":"polygon Polygon (sf object SpatialPolygonsDataframe) WGS84 CRS defines region queried. height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom level reduce_hw Number pixels reduce height/width . creates overlap tiles ensure blank space tiles (default = 10 pixels).","code":""},{"path":"/reference/gt_make_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates grid to query Google Traffic â€” gt_make_grid","text":"Returns dataframe locations query parameters.","code":""},{"path":"/reference/gt_make_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates grid to query Google Traffic â€” gt_make_grid","text":"","code":"## Make polygon poly_sf <- c(xmin = -74.02426,              xmax = -73.91048,              ymin = 40.70042,              ymax = 40.87858) %>%   sf::st_bbox() %>%   sf::st_as_sfc() %>%   sf::st_as_sf()  sf::st_crs(poly_sf) <- 4326  ## Make grid using polygon grid_sf <- gt_make_grid(polygon = poly_sf,                         height  = 2000,                         width   = 2000,                         zoom    = 16) #> Warning: st_centroid assumes attributes are constant over geometries of x"},{"path":"/reference/gt_make_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Make traffic html from Google â€” gt_make_html","title":"Make traffic html from Google â€” gt_make_html","text":"function returns html traffic Google. gt_html_to_raster() can used convert html georeferenced raster file.","code":""},{"path":"/reference/gt_make_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make traffic html from Google â€” gt_make_html","text":"","code":"gt_make_html(location, height, width, zoom, filename, google_key)"},{"path":"/reference/gt_make_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make traffic html from Google â€” gt_make_html","text":"location Vector latitude longitude height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom; integer 0 20. information, see filename Path filename save file google_key Google API key","code":""},{"path":"/reference/gt_make_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make traffic html from Google â€” gt_make_html","text":"Returns html file Google traffic","code":""},{"path":"/reference/gt_make_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Google Traffic PNG â€” gt_make_png","title":"Make Google Traffic PNG â€” gt_make_png","text":"Make png file Google traffic data. gt_load_png_as_traffic_raster() function can used convert png traffic raster","code":""},{"path":"/reference/gt_make_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Google Traffic PNG â€” gt_make_png","text":"","code":"gt_make_png(   location,   height,   width,   zoom,   out_filename,   google_key,   webshot_delay = NULL,   print_progress = T )"},{"path":"/reference/gt_make_png.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Google Traffic PNG â€” gt_make_png","text":"location Vector latitude longitude height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom level; integer 0 20. information, see out_filename Filename/path png file make google_key Google API key webshot_delay long wait google traffic layer render. Larger height/widths require longer delay times. NULL, following delay time (seconds) used: delay = max(height,width)/200. print_progress Whether print function progress","code":""},{"path":"/reference/gt_make_png.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Google Traffic PNG â€” gt_make_png","text":"Returns georeferenced raster file. file can contain following values: 1 = traffic; 2 = light traffic; 3 = moderate traffic; 4 = heavy traffic.","code":""},{"path":"/reference/gt_make_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Google Traffic PNG â€” gt_make_png","text":"","code":"if (FALSE) { gt_make_png(location     = c(40.712778, -74.006111),             height       = 1000,             width        = 1000,             zoom         = 16,             out_filename = \"google_traffic.png\",             google_key   = \"GOOGLE-KEY-HERE\") }"},{"path":"/reference/gt_make_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Google Traffic Raster â€” gt_make_raster","title":"Make Google Traffic Raster â€” gt_make_raster","text":"Make raster Google traffic data, pixel one four values indicating traffic volume (traffic, light, moderate, heavy).","code":""},{"path":"/reference/gt_make_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Google Traffic Raster â€” gt_make_raster","text":"","code":"gt_make_raster(   location,   height,   width,   zoom,   google_key,   webshot_delay = NULL,   print_progress = T )"},{"path":"/reference/gt_make_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Google Traffic Raster â€” gt_make_raster","text":"location Vector latitude longitude height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom level; integer 0 20. information, see google_key Google API key webshot_delay long wait google traffic layer render. Larger height/widths require longer delay times. NULL, following delay time (seconds) used: delay = max(height,width)/200. print_progress Whether print function progress","code":""},{"path":"/reference/gt_make_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Google Traffic Raster â€” gt_make_raster","text":"Returns georeferenced raster file. file can contain following values: 1 = traffic; 2 = light traffic; 3 = moderate traffic; 4 = heavy traffic.","code":""},{"path":"/reference/gt_make_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Google Traffic Raster â€” gt_make_raster","text":"","code":"if (FALSE) { r <- gt_make_raster(location   = c(40.712778, -74.006111),                     height     = 1000,                     width      = 1000,                     zoom       = 16,                     google_key = \"GOOGLE-KEY-HERE\") }"},{"path":"/reference/gt_make_raster_from_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"Make raster Google traffic data, pixel one four values indicating traffic volume (traffic, light, moderate, heavy).","code":""},{"path":"/reference/gt_make_raster_from_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"","code":"gt_make_raster_from_grid(   grid_param_df,   google_key,   webshot_delay = NULL,   return_list_of_tiles = F,   print_progress = T )"},{"path":"/reference/gt_make_raster_from_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"grid_param_df Grid parameter dataframe produced gt_make_grid google_key Google API key webshot_delay long wait google traffic layer render. Larger height/widths require longer delay times. NULL, following delay time (seconds) used: delay = max(height,width)/200. return_list_of_tiles Instead merging traffic tiles together one large tile, return list tiles print_progress Whether print function progress","code":""},{"path":"/reference/gt_make_raster_from_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"Returns georeferenced raster file. file can contain following values: 1 = traffic; 2 = light traffic; 3 = moderate traffic; 4 = heavy traffic.","code":""},{"path":"/reference/gt_make_raster_from_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Google Traffic Raster Based on Grid of Coordinates â€” gt_make_raster_from_grid","text":"","code":"if (FALSE) { ## Grab polygon of Manhattan us_sp <- raster::getData('GADM', country='USA', level=2) ny_sp <- us_sp[us_sp$NAME_2 %in% \"New York\",]  ## Make Grid grid_df <- gt_make_grid(polygon = ny_sp,                        height   = 2000,                        width    = 2000,                        zoom     = 16)  ## Make raster from grid                         r <- gt_make_raster_from_grid(grid_param_df = grid_clean_df,                               google_key    = \"GOOGLE-KEY-HERE\") }"},{"path":"/reference/gt_make_raster_from_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"Make raster Google traffic data, pixel one four values indicating traffic volume (traffic, light, moderate, heavy).","code":""},{"path":"/reference/gt_make_raster_from_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"","code":"gt_make_raster_from_polygon(   polygon,   height,   width,   zoom,   google_key,   webshot_delay = NULL,   reduce_hw = 10,   return_list_of_tiles = F,   mask_to_polygon = T,   print_progress = T )"},{"path":"/reference/gt_make_raster_from_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"polygon Polygon (sf object SpatialPolygonsDataframe) WGS84 CRS height Height (pixels; pixel length depends zoom) width Width (pixels; pixel length depends zoom) zoom Zoom level; integer 0 20. information, see google_key Google API key webshot_delay long wait google traffic layer render. Larger height/widths require longer delay times. NULL, following delay time (seconds) used: delay = max(height,width)/200. reduce_hw Number pixels reduce height/width . creates overlap tiles ensure blank space tiles (default: 10). return_list_of_tiles Whether return list raster tiles instead mosaicing together (default: FALSE). mask_to_polygon Whether mask raster polygon (default: TRUE). print_progress Show progress tile processed (default: TRUE).","code":""},{"path":"/reference/gt_make_raster_from_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"Returns georeferenced raster file. file can contain following values: 1 = traffic; 2 = light traffic; 3 = moderate traffic; 4 = heavy traffic.","code":""},{"path":"/reference/gt_make_raster_from_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Google Traffic Raster Based on Polygon â€” gt_make_raster_from_polygon","text":"","code":"if (FALSE) { ## Grab polygon of Manhattan us_sp <- raster::getData('GADM', country='USA', level=2) ny_sp <- us_sp[us_sp$NAME_2 %in% \"New York\",]  ## Make raster r <- gt_make_raster_from_polygon(polygon    = ny_sp,                                  height     = 2000,                                  width      = 2000,                                  zoom       = 16,                                  google_key = \"GOOGLE-KEY-HERE\") }"},{"path":"/reference/gt_mosaic.html","id":null,"dir":"Reference","previous_headings":"","what":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"mosaic function R requires rasters origin resolution. However, producing multiple rasters query traffic data across large study area, rasters origins may resolutions (cases rasters different latitudes queried). gt_mosaic() allows mosaicing rasters different origins resolutions.","code":""},{"path":"/reference/gt_mosaic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"","code":"gt_mosaic(r_list)"},{"path":"/reference/gt_mosaic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"r_list List rasters","code":""},{"path":"/reference/gt_mosaic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"Returns raster.","code":""},{"path":"/reference/gt_mosaic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mosaic rasters with different origins and resolutions â€” gt_mosaic","text":"","code":"r1 <- raster(ncol=10, nrow=10, xmn = -10, xmx = 1,  ymn = -10, ymx = 1) r2 <- raster(ncol=10, nrow=10, xmn = 0,   xmx = 10, ymn = 0,   ymx = 10) r3 <- raster(ncol=10, nrow=10, xmn = 9,   xmx = 20, ymn = 9,   ymx = 20)  r123 <- list(r1, r2, r3)  r <- gt_mosaic(r123)"}]
